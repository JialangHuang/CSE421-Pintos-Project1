             +--------------------------+
         | CS 140                      |
             | PROJECT 2: USER PROGRAMS    |
             | DESIGN DOCUMENT            |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

JinKyu Hwang <jinkyuhw@buffalo.edu>
Jialang Huang <jialangh@buffalo.edu>
Jason Pettrone <japettro@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.

JinKyu Hwang: Argument Passing
Jialang Huang: system call
Jason Pettrone: Synchronization & Rationale

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
    char *argv[];     // list of arguments
    Int argc;           //  the number of words
---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Once the stack has been initialized and argument parsing has been started, we first tokenize the command line inputs and push them into the stack by calling the method strtok_r() function. The elements of the stack are listed from right to left in the command line inputs.

Overflowing the stack page can be avoided by calculating the required bytes of tokens and the space for argument passing. If any value exceeds the single page size (4 KB), we stop the proceed.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

    According the C documentation, the strtok_r() function is a reentrant version of strtok(). Strtok_r() function provides the saveptr without static pointer for reuse in the next time. It can also be used to parse multiple strings at once. 

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
It simplifies security. The new executable just inherits the privileges of the other program that starts it.
It simplifies the kernel. No longer having to parse/validate security, or environment - and eliminates any bugs that would be a security problem
creates more flexibility. You can have many shell interpreters for different purposes without having to change the kernel each time, and it allows EACH user to use a different shell.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
In thread.c:

In thread{
Tid_t parent_thread # ID of thread that created this thread
Struct list child_list # to hold the child process running
Struct list exited_child_list # child processes that have finished executing
Bool waiting # true - wait has been called on this thread, false otherwise
Struct list file_list # to hold the file descriptors
Int child_load_state # descriptor of child’s current loading state
            # -1 not loading
            # 0 currently loading
            # 1 done loading
}



>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
File descriptors are unique within a single process. Each process tracks a list of file descriptors
---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
In both reading and writing validate all pointer and address first, after that we can direct access 

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
The least number of inspections of the page table is 1, and the greatest possible number of inspections of page table is 2.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
Search the process’s child process list, if t is not exist, return -1
If process is already waiting, return -1
Otherwise, current process wait until its child process return exit status, and current process remove the child process form its child list. Then return the child process status



>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.
First, to avoid the error, use a function valid_prt() to check the pointer inside the syscall_call() , if false, kill the process.
Second, if the error is detected, call process_exit() to free all component. 


---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We’ll have two additional pieces of data associated with threads: Each thread will keep track of the parent thread that created it (parent_thread) and an integer (child_load_state) which will initialize to -1 if a created child is not loading, 0 if currently loading, and 1 if done loading.

By every child thread having access to it’s parent thread, the child can update the child_load_state variable depending on its current state. When control is given back to the parent thread, the parent thread can check the child_load_state variable to determine what happened with the loading of the child thread. Specifically, if the child_load_state variable is -1 or 0, then we will return -1 because we unsuccessfully loaded the executable. If the child_load_state variable is 1, then we can return the successfully created executable.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

Ensuring proper synchronization and avoiding race conditions in the following circumstances:

P calls wait(C) before C exits:
Child threads will place themselves in the exited_child list of their parent and remove themselves from the child_list of their parent. Therefore, P can wait and check the exited_child list for the child to appear before continuing execution.

P calls wait(C) after C exits:
Similar to above, but we will do a preliminary check of the exited_child list. If C is already in there then the wait has already happened, so we can continue P’s execution.

P terminates without waiting before C exits:
C will check P’s child_list and exited_child list. If they are empty (meaning P has exited and freed it’s lists), then C follows suit and frees it’s lists and exits.

P terminates without waiting after C exits:
Since C is already exited there is no problem, we just need to make sure that C clears it’s lists.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

The approach is simple, straightforward, and gets the job done.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantage:
Since each thread maintains a list of it’s own file descriptors, it can only operate on it’s own associated files. No mixing up stuff between other threads with something like a global file descriptors list.

Disadvantage:
Many items in the list may not be needed at all times and will use up additional memory in each thread. In an ideal scenario, we only use memory that we’re currently operating on.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We made no changes to this yet.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?


